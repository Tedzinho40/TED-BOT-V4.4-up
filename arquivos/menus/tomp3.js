// Importa as depend√™ncias necess√°rias
const { downloadContentFromMessage } = require("@whiskeysockets/baileys");
const { exec } = require("child_process");
const fs = require("fs");

async function videoToAudio(sock, Info, from) {
  try {
    // Verifica se h√° v√≠deo na mensagem atual ou na mensagem respondida (reply)
    const quoted = Info.message?.extendedTextMessage?.contextInfo?.quotedMessage;
    const videoMsg = Info.message?.videoMessage || quoted?.videoMessage;

    if (!videoMsg) {
      return sock.sendMessage(from, {
        text: "‚ùå Voc√™ precisa enviar ou marcar um v√≠deo para extrair o √°udio."
      }, { quoted: Info });
    }

    // Reage √† mensagem para indicar que o processamento come√ßou
    await sock.sendMessage(from, { react: { text: "‚è≥", key: Info.key } });
    await sock.sendMessage(from, {
      text: "üéµ Convertendo v√≠deo para √°udio MP3..."
    }, { quoted: Info });

    // Baixa o conte√∫do do v√≠deo da mensagem
    const stream = await downloadContentFromMessage(videoMsg, "video");
    let buffer = Buffer.from([]);
    for await (const chunk of stream) {
      buffer = Buffer.concat([buffer, chunk]);
    }

    // Define nomes para os arquivos tempor√°rios de entrada e sa√≠da
    const tempInput = `temp_video_${Date.now()}.mp4`;
    const tempOutput = `audio_${Date.now()}.mp3`;

    // Salva o buffer do v√≠deo em um arquivo tempor√°rio
    fs.writeFileSync(tempInput, buffer);

    // Monta o comando do FFmpeg para converter o v√≠deo para √°udio MP3
    // -i: arquivo de entrada
    // -vn: desabilita o stream de v√≠deo
    // -acodec libmp3lame: usa o encoder MP3 LAME
    // -ab 192k: define o bitrate do √°udio para 192 kbps
    // -ar 44100: define a taxa de amostragem para 44100 Hz
    // -y: sobrescreve o arquivo de sa√≠da se ele j√° existir
    const ffmpegCommand = `ffmpeg -i "${tempInput}" -vn -acodec libmp3lame -ab 192k -ar 44100 -y "${tempOutput}"`;

    // Executa o comando FFmpeg
    exec(ffmpegCommand, async (error, stdout, stderr) => {
      // Deleta o arquivo de v√≠deo tempor√°rio, independentemente do resultado
      if (fs.existsSync(tempInput)) {
        fs.unlinkSync(tempInput);
      }

      if (error) {
        console.error("Erro no FFmpeg:", error);
        return sock.sendMessage(from, {
          text: "‚ùå Erro ao converter o v√≠deo para √°udio. Verifique se o FFmpeg est√° instalado e acess√≠vel no PATH do sistema."
        }, { quoted: Info });
      }

      // Verifica se o arquivo de √°udio foi criado com sucesso
      if (fs.existsSync(tempOutput)) {
        try {
          const audioBuffer = fs.readFileSync(tempOutput);
          const fileSizeMB = (audioBuffer.length / 1024 / 1024).toFixed(2);

          // Envia o √°udio convertido
          await sock.sendMessage(from, {
            audio: audioBuffer,
            mimetype: "audio/mpeg",
            fileName: `audio_extraido_${Date.now()}.mp3`,
            ptt: false // Envia como √°udio, n√£o como mensagem de voz
          }, { quoted: Info });

          // Envia uma mensagem de sucesso com informa√ß√µes sobre o arquivo
          await sock.sendMessage(from, {
            text: `‚úÖ *√Åudio extra√≠do com sucesso!*\n\nüìä Tamanho: ${fileSizeMB} MB\nüéµ Formato: MP3 192kbps`
          }, { quoted: Info });

        } catch (sendError) {
          console.error("Erro ao enviar o √°udio:", sendError);
          await sock.sendMessage(from, {
            text: "‚ùå Ocorreu um erro ao enviar o √°udio convertido."
          }, { quoted: Info });
        } finally {
          // Garante que o arquivo de √°udio tempor√°rio seja deletado ap√≥s o envio
          if (fs.existsSync(tempOutput)) {
            fs.unlinkSync(tempOutput);
          }
        }
      } else {
        await sock.sendMessage(from, {
          text: "‚ùå Falha na convers√£o do √°udio. O arquivo de sa√≠da n√£o foi gerado."
        }, { quoted: Info });
      }
    });

  } catch (error) {
    console.error("Erro no comando video2audio:", error);
    await sock.sendMessage(from, {
      text: "‚ùå Ocorreu um erro inesperado ao processar sua solicita√ß√£o."
    }, { quoted: Info });
  }
}

// Exporta a fun√ß√£o para que ela possa ser chamada por outros arquivos
module.exports = videoToAudio;
