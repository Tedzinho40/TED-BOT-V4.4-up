
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

const configPath = path.join(__dirname, 'statusConfig.json');

/**
 * Carrega a configura√ß√£o de status do arquivo.
 * @returns {object} O objeto de configura√ß√£o.
 */
function loadStatusConfig() {
  try {
    if (fs.existsSync(configPath)) {
      const data = fs.readFileSync(configPath, 'utf8');
      return JSON.parse(data);
    }
    // Se o arquivo n√£o existir, retorna o estado padr√£o e cria o arquivo
    const defaultConfig = { 
      online: true, // Por padr√£o, o bot inicia online
      readReceipts: true // Por padr√£o, as confirma√ß√µes de leitura est√£o ativas
    };
    fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2), 'utf8');
    return defaultConfig;
  } catch (error) {
    console.error(chalk.red(`‚ùå Erro ao carregar statusConfig.json: ${error.message}`));
    return { online: true, readReceipts: true };
  }
}

/**
 * Salva a configura√ß√£o de status no arquivo.
 * @param {boolean} online - O novo estado online (true para ON, false para OFF).
 * @param {boolean} readReceipts - O novo estado de confirma√ß√£o de leitura (true para ON, false para OFF).
 */
function saveStatusConfig(online, readReceipts) {
  try {
    const config = { online, readReceipts };
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
    console.log(chalk.hex('#00BFFF')(`üåê Status: ${online ? 'ONLINE' : 'OFFLINE'} | ‚úÖ Confirma√ß√£o de Leitura: ${readReceipts ? 'ATIVADA' : 'DESATIVADA'} e salvo em statusConfig.json`));
    console.log(chalk.hex('#00BFFF')(`[FILE] statusConfig.json atualizado: Online=${online}, ReadReceipts=${readReceipts}`));
  } catch (error) {
    console.error(chalk.red(`‚ùå Erro ao salvar statusConfig.json: ${error.message}`));
  }
}

/**
 * Verifica se o bot est√° online.
 * @returns {boolean} True se online, false caso contr√°rio.
 */
function isOnline() {
  return loadStatusConfig().online;
}

/**
 * Verifica se as confirma√ß√µes de leitura est√£o ativas.
 * @returns {boolean} True se ativas, false caso contr√°rio.
 */
function areReadReceiptsActive() {
  return loadStatusConfig().readReceipts;
}

module.exports = {
  loadStatusConfig,
  saveStatusConfig,
  isOnline,
  areReadReceiptsActive
};

